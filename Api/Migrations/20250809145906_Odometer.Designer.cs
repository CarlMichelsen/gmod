// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250809145906_Odometer")]
    partial class Odometer
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("gmod")
                .HasAnnotation("ProductVersion", "10.0.0-preview.6.25358.103")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Database.Entity.ImageContentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("data");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("image_id");

                    b.HasKey("Id")
                        .HasName("pk_image_content");

                    b.HasIndex("ImageId")
                        .IsUnique()
                        .HasDatabaseName("ix_image_content_image_id");

                    b.ToTable("image_content", "gmod");
                });

            modelBuilder.Entity("Database.Entity.ImageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("ContentHashCode")
                        .HasColumnType("integer")
                        .HasColumnName("content_hash_code");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid")
                        .HasColumnName("content_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal?>("CreatorSteamId64")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("creator_steam_id64");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("SizeX")
                        .HasColumnType("integer")
                        .HasColumnName("size_x");

                    b.Property<int>("SizeY")
                        .HasColumnType("integer")
                        .HasColumnName("size_y");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.HasKey("Id")
                        .HasName("pk_image");

                    b.HasIndex("ContentHashCode")
                        .HasDatabaseName("ix_image_content_hash_code");

                    b.ToTable("image", "gmod");
                });

            modelBuilder.Entity("Database.Entity.NavNodeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Map")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("map");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)")
                        .HasColumnName("tag");

                    b.Property<int>("X")
                        .HasColumnType("integer")
                        .HasColumnName("x");

                    b.Property<int>("Y")
                        .HasColumnType("integer")
                        .HasColumnName("y");

                    b.Property<int>("Z")
                        .HasColumnType("integer")
                        .HasColumnName("z");

                    b.HasKey("Id")
                        .HasName("pk_nav_node");

                    b.HasIndex("Map")
                        .HasDatabaseName("ix_nav_node_map");

                    b.HasIndex("Tag")
                        .HasDatabaseName("ix_nav_node_tag");

                    b.ToTable("nav_node", "gmod");
                });

            modelBuilder.Entity("Database.Entity.NavNodeLinkEntity", b =>
                {
                    b.Property<Guid>("ToId")
                        .HasColumnType("uuid")
                        .HasColumnName("to_id");

                    b.Property<Guid>("FromId")
                        .HasColumnType("uuid")
                        .HasColumnName("from_id");

                    b.HasKey("ToId", "FromId")
                        .HasName("pk_nav_node_link");

                    b.HasIndex("FromId")
                        .HasDatabaseName("ix_nav_node_link_from_id");

                    b.ToTable("nav_node_link", "gmod");
                });

            modelBuilder.Entity("Database.Entity.OdometerDataEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ParentOdometerTripId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_odometer_trip_id");

                    b.Property<string>("Positions")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("positions");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("received_at");

                    b.HasKey("Id")
                        .HasName("pk_odometer_data");

                    b.HasIndex("ParentOdometerTripId")
                        .HasDatabaseName("ix_odometer_data_parent_odometer_trip_id");

                    b.ToTable("odometer_data", "gmod");
                });

            modelBuilder.Entity("Database.Entity.OdometerTripEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ended_at");

                    b.Property<string>("Map")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("map");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("tag");

                    b.HasKey("Id")
                        .HasName("pk_odometer_trip");

                    b.ToTable("odometer_trip", "gmod");
                });

            modelBuilder.Entity("Database.Entity.ImageContentEntity", b =>
                {
                    b.HasOne("Database.Entity.ImageEntity", "Image")
                        .WithOne("Content")
                        .HasForeignKey("Database.Entity.ImageContentEntity", "ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_image_content_image_image_id");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Database.Entity.NavNodeLinkEntity", b =>
                {
                    b.HasOne("Database.Entity.NavNodeEntity", "From")
                        .WithMany()
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_nav_node_link_nav_node_from_id");

                    b.HasOne("Database.Entity.NavNodeEntity", "To")
                        .WithMany()
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_nav_node_link_nav_node_to_id");

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("Database.Entity.OdometerDataEntity", b =>
                {
                    b.HasOne("Database.Entity.OdometerTripEntity", "ParentOdometerTrip")
                        .WithMany("OdometerData")
                        .HasForeignKey("ParentOdometerTripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_odometer_data_odometer_trip_parent_odometer_trip_id");

                    b.Navigation("ParentOdometerTrip");
                });

            modelBuilder.Entity("Database.Entity.ImageEntity", b =>
                {
                    b.Navigation("Content");
                });

            modelBuilder.Entity("Database.Entity.OdometerTripEntity", b =>
                {
                    b.Navigation("OdometerData");
                });
#pragma warning restore 612, 618
        }
    }
}
